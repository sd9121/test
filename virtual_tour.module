<?php

/**
 * @file
 * Provides an Virtual Tour Effect field formatter for Image fields.
 *
 * This module provides a field formatter that allows users to specify an image
 * style to display, and another image style to use as the virtual tour effect
 * version of the image.
 */

use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function virtual_tour_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.virtual_tour':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Virtual Tour images can be provided in either equirectangular, cube map, or multiresolution formats. This module provides an field formatter for Equirectangular virtual tour effect (panorama effect). An image style is selected for the default display image, and an additional style is selected to be used as the Virtual Tour image. For more information, see the <a href=":documentation">online documentation for the Virtual Tour module</a>.', [':documentation' => 'https://pannellum.org/documentation/overview/']) . '</p>';
      $output .= '<h3>' . t('Requirements') . '</h3>';
      $output .= '<p>' . t('This module depends on the core Image module and Libraries API being enabled. The Pannellum jQuery plugin is used for the Panoram effects') . '</p>';
      $output .= '<h3>' . t('Install') . '</h3>';
      $output .= '<p>' . t('Run npm install in Virtual Tour module.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('To configure the Image Virtual Tour display, go to Administration > Structure > Content types and select the content type you would want to use. If you do not already have an Image field defined, add one by going to the Manage Fields tab. After you have an Image field, go to the Manage Display tab. Change the Format for your Image field to Virtual Tour Image. To change which styles are displayed for the displayed image, select the desired image styles, and click Update.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function virtual_tour_theme($existing, $type, $theme, $path) {
  return [
    'virtual_tour' => [
      'variables' => [
        'item' => NULL,
        'display_style' => NULL,
        'settings' => NULL,
        'virtual_tour_autoload' => NULL,
      ],
      'template' => 'virtual-tour',
    ],
  ];
}

/**
 * Preprocess function for virtual_tour.
 */
function template_preprocess_virtual_tour(&$variables) {
  static $index = 0;
  $item = $variables['item'];

  if ($variables['display_style']) {

    $variables['image'] = ImageStyle::load($variables['display_style'])->buildUrl($item->entity->getFileUri());
  }
  else {
    $variables['image'] = file_create_url($item->entity->getFileUri());
  }

  $variables['effectType'] = $variables['settings']['type'];
  $variables['autoload'] = $variables['virtual_tour_autoload'] ?: 0;
  $variables['alt'] = $item->alt;
  $variables['id'] = $variables['settings']['id'] . $variables['item']->getValue()['target_id'];
  $variables['title'] = $item->title;

  // Attaching a image src and autoload variables with drupalsettings.
  $variables['#attached']['drupalSettings']['virtual_tour'][$index]['id'] = $variables['id'];
  $variables['#attached']['drupalSettings']['virtual_tour'][$index]['src'] = $variables['image'];
  $variables['#attached']['drupalSettings']['virtual_tour'][$index]['autoload'] = $variables['autoload'];
  $index = 1 + $index;
}
